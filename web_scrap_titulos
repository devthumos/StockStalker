from bs4 import BeautifulSoup
import requests  # biblioteca para usar sites web

acaodigitada = input().strip()

urla = "https://statusinvest.com.br/acoes/" + acaodigitada
urlfii = "https://statusinvest.com.br/fundos-imobiliarios/" + acaodigitada
urlfin = "https://statusinvest.com.br/fundos-de-investimento/" + acaodigitada
urlbdr = "https://statusinvest.com.br/bdrs/" + acaodigitada
urltes = "https://statusinvest.com.br/tesouro/" + acaodigitada

urls = [urla, urlfii, urlfin, urlbdr, urltes]
enum = 0
error = 0

for enum in range(0, 5):
    result = requests.get(urls[enum]).text
    doc = BeautifulSoup(result, "html.parser")

    tag = doc.find(class_="d-block mb-1 fw-900")
    if (hasattr(tag, 'OPS. . .')):  # verificando se o objeto possui atributo string na classe
        if tag.string == 'OPS. . .':
            # print(f'error, testar a outra url')
            error = 1
            # print(enum)

    else:
        error = 0
        break

if (error == 1):
    print(f'Papel digitado inexistente')
    exit()

result = requests.get(urls[enum]).text
doc = BeautifulSoup(result, "html.parser")


values = doc.find_all(class_="value")

list_values = []

k = 4 if urls[enum] == urltes else 5

list_iteravel = values[:k]
for i in range(0, len(list_iteravel)):
    list_values.append(list_iteravel[i].string)

if urls[enum] == urlfin:
    msg = f"CÓDIGO:{acaodigitada} | TIPO:1 | RENTABILIDADE(12M):{list_values[0]} | RENTABILIDADE(24M):{list_values[1]} | VOLATILIDADE(12M):{list_values[2]} | ÍNDICE DE SHARPE(6M):{list_values[3]} | PATRIMÔNIO LÍQUIDO: {list_values[4]} | PREÇO DA COTA: {list_values[5]}"
elif urls[enum] == urltes:
    msg = f"CÓDIGO:{acaodigitada} | TIPO:tesouro | VALOR UNITÁRIO:{list_values[0]} | MIN. 52 SEM.:{list_values[1]} | MÁX. 52 SEM.:{list_values[2]} | VALORIZAÇÃO(12M):{list_values[3]}"
else:
    msg = f"CÓDIGO:{acaodigitada} | TIPO:1 | VALOR ATUAL:{list_values[0]} | MIN. 52 SEM.:{list_values[1]} | MÁX. 52 SEM.:{list_values[2]} | DIVIDEND YIELD:{list_values[3]} | VALORIZAÇÃO (12M):{list_values[4]}"

print(msg)
