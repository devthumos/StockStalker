#aplicação 2 webscraping para conseguir acessar o módulo de pesquisa do site

import soupsieve.css_parser
from bs4 import BeautifulSoup
import requests                                                 #biblioteca para usar sites web


print('Digite o papel a ser pesquisado aqui:')
acaodigitada = input().lower().strip()

acao = acaodigitada.split()

if acao[0] == 'tesouro':
    acaodigitada = acaodigitada.split()
    acaodigitada = '-'.join(acaodigitada)

else:
    acaodigitada = acaodigitada.replace(" ", "")                    #remove espaços digitados erradamente

#
#
#
#


#identificando o tipo de papel digitado

urla = "https://statusinvest.com.br/acoes/"+acaodigitada
urlfii = "https://statusinvest.com.br/fundos-imobiliarios/"+acaodigitada
urlfin = "https://statusinvest.com.br/fundos-de-investimento/"+acaodigitada
urlbdr = "https://statusinvest.com.br/bdrs/"+acaodigitada
urltes = "https://statusinvest.com.br/tesouro/" + acaodigitada

urls = [urla, urlfii, urlfin, urlbdr, urltes]
enum = 0
error = 0

for enum in range(0, 5):
    result = requests.get(urls[enum]).text
    doc = BeautifulSoup(result, "html.parser")

    tag = doc.find(class_="d-block mb-1 fw-900")
    if(hasattr(tag, 'OPS. . .')):                               #verificando se o objeto possui atributo string na classe
        if tag.string == 'OPS. . .':
            #print(f'error, testar a outra url')
            error = 1
            #print(enum)

    else:
        error = 0
        break



if(error == 1):
    print(f'Papel digitado inexistente')
    exit()


result = requests.get(urls[enum]).text
doc = BeautifulSoup(result, "html.parser")

#print(urls[enum])


#fim da identificacao do papel
#
#
#
#
#


#começo da busca dos valores


tag = doc.find(class_ = "value")                                #função para procurar classe com value como parametro, limite de 1


valorpapel = tag.string                                              #captura a string da tag
print("R$: ", valorpapel)



tag = doc.find_all(class_ = "value")                                 #procurando pela classe com o valor do papel



contador = 0


#tratando a exceção do tesouro que não tem dividend yield e os titulos




if urls[enum] == urltes:
    nome = doc.find_all(class_="title")


    list = ["", "", "", ""]
    listnome = ["", "", "", ""]

    for tags in tag[:4]:
        list[contador] = tags
        contador = contador+1

    contador = 0

    for nomes in nome[:4]:
        listnome[contador] = nomes
        contador = contador+1


    valornome = listnome[0].string                              #títulos dos indices buscados
    min52sem_nome = listnome[1].string
    max52sem_nome = listnome[2].string
    valorizacao_nome = listnome[3].string


    min52sem = list[1].string                                   # valor minimo em 52 semanas
    max52sem = list[2].string                                   # valor maximo em 52 semanas
    valorizacao = list[3].string                                # valorizacao em 12 meses



#
#
#
#


else:
    nome = doc.find_all(class_="title m-0")


    list = ["","","","",""]

    listnome = ["", "", "", "", ""]

    for tags in tag[:5]:
        list[contador] = tags
        contador = contador+1

    contador = 0

    for nomes in nome[:5]:
        listnome[contador] = nomes
        contador = contador + 1


    valornome = listnome[0].string                                        #títulos dos indices buscados
    min52sem_nome = listnome[1].string
    max52sem_nome = listnome[2].string
    dividendyield_nome = listnome[3].string
    valorizacao_nome = listnome[4].string


    min52sem = list[1].string                                               #valor minimo em 52 semanas
    max52sem = list[2].string                                               #valor maximo em 52 semanas
    dividendyield = list[3].string                                          #dividend yield
    valorizacao = list[4].string                                            #valorizacao em 12 meses



#fim da busca dos valores
#
#
#
#
